"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const promises_1 = require("fs/promises");
const TJS = __importStar(require("typescript-json-schema"));
const config_1 = require("./config");
const settings = {
    required: true,
};
const compilerOptions = {
    strictNullChecks: true,
    paths: {
        '@t/*': [
            config_1.baseDir + '/*'
        ]
    }
};
(0, promises_1.readdir)(config_1.schemaDir, { withFileTypes: true })
    .then(dirs => dirs.filter(dir => dir.isDirectory())
    .map(async (dir) => [dir.name, await (0, promises_1.readdir)((0, path_1.resolve)(config_1.schemaDir, dir.name))]))
    .then(dirs => Promise.all(dirs))
    .then(dirs => dirs
    .flatMap(([dir, files]) => files.map(file => (0, path_1.resolve)(config_1.schemaDir, dir, file)))
    .filter(file => /(\d+\.\d+\.\d+)(\.d)?\.ts$/.test(file)))
    .then(files => programTypescript(files));
async function programTypescript(files) {
    const tsTypeFiles = files.filter(file => /\.ts$/.test(file));
    const objectMaps = tsTypeFiles.map(file => tsTypeFileName2TypeSymbolName(file));
    await (0, promises_1.rm)(config_1.distDir, { recursive: true, force: true });
    await (0, promises_1.mkdir)(config_1.distDir, { recursive: true });
    for (let i = 0; i < objectMaps.length; i++) {
        const { schemaName, schemaVersion, typeName, file } = objectMaps[i];
        const program = TJS.getProgramFromFiles([file], compilerOptions, config_1.baseDir);
        const schema = TJS.generateSchema(program, typeName, settings);
        console.log(`Build ok: ${schemaName}:${schemaVersion} => ${typeName}`);
        await (0, promises_1.writeFile)((0, path_1.resolve)(config_1.distDir, `${schemaName}_${schemaVersion}.json`), JSON.stringify(schema));
    }
    console.log('Build complete');
}
function tsTypeFileName2TypeSymbolName(file) {
    const [, schemaName = null, schemaVersion = null] = file.match(/([\w-]+?)[\\/](\d+\.\d+\.\d+)(\.d)?\.ts$/) ?? [];
    const nameScope = schemaName?.replace(/-(\w)|(^\w)/g, (match, p1 = '', p2 = '') => `${p1}${p2}`.toUpperCase());
    return {
        schemaName,
        schemaVersion,
        typeName: nameScope + '.Main',
        file
    };
}
